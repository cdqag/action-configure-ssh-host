name: Configure SSH Host
description: A GitHub Action to create a new ssh/config entry for given host

author: CDQ AG
branding:
  icon: lock
  color: red

inputs:
  name:
    description: A unique name for the server config entry
    required: true

  host:
    description: The host address
    required: true

  port:
    description: "SSH port (default: to 22)"
    required: false
    default: "22"

  user:
    description: An user
    required: true
  
  private-key:
    description: Private SSH key for the user
    required: true

outputs:
  server-name:
    description: The name for the server in the config
    value: ${{ steps.prepare.outputs.server-name }}

runs:
  using: composite
  steps:
    - id: prepare
      name: Prepare sanitized server name
      shell: bash
      env:
        INPUT_NAME: ${{ inputs.name }}
      run: |
        SERVER_NAME=$(echo "$INPUT_NAME" | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr A-Z a-z)
        echo "server-name=$SERVER_NAME" >> $GITHUB_OUTPUT

    - name: Ensure SSH directory exists
      shell: bash
      run: |
        mkdir -p "$HOME/.ssh"
        chmod 700 "$HOME/.ssh"

    - name: Ensure that entry does not already exist
      shell: bash
      env:
        SERVER_NAME: ${{ steps.prepare.outputs.server-name }}
      run: |
        if [ ! -f "$HOME/.ssh/config" ]; then
          echo ".ssh/config file does not exist yet - skipping check"
          exit 0
        fi

        if grep -q "Host $SERVER_NAME" "$HOME/.ssh/config"; then
          echo "Host $SERVER_NAME already exists in ~/.ssh/config"
          exit 1
        fi

    - id: private-key
      name: Create the private key file
      shell: bash
      env:
        PRIVATE_KEY: ${{ inputs.private-key }}
        SERVER_NAME: ${{ steps.prepare.outputs.server-name }}
      run: |
        PRIVATE_KEY_PATH="$HOME/.ssh/$SERVER_NAME.key"

        echo "$PRIVATE_KEY" > "$PRIVATE_KEY_PATH"
        chmod 600 "$PRIVATE_KEY_PATH"

        echo "path=$PRIVATE_KEY_PATH" >> $GITHUB_OUTPUT

    - name: Scan the public SSH host keys
      shell: bash
      env:
        SSH_HOST: ${{ inputs.host }}
        SSH_PORT: ${{ inputs.port }}
      run: |
        ssh-keyscan -H "$SSH_HOST" -p "$SSH_PORT" >> "$HOME/.ssh/known_hosts"

    - name: Create entry in ssh/config
      shell: bash
      env:
        SERVER_NAME: ${{ steps.prepare.outputs.server-name }}
        SSH_HOST: ${{ inputs.host }}
        SSH_PORT: ${{ inputs.port }}
        SSH_USER: ${{ inputs.user }}
        PRIVATE_KEY_PATH: ${{ steps.private-key.outputs.path }}
      run: |
        cat >> "$HOME/.ssh/config" <<END
        Host $SERVER_NAME
          HostName $SSH_HOST
          Port $SSH_PORT
          User $SSH_USER
          IdentityFile $PRIVATE_KEY_PATH
        END
